/*doc
---
title    : linear-gradient()
parent   : _04_css3
name     : linear-gradient
category : index
---

| IE    | Chrome | Firefox | Safari | Opera  | iOS   | Android | Can I use                                               |
| :---: | :----: | :-----: | :----: | :----: | :---: | :-----: | :------------------------------------------------------ |
| `10`  | `OK`   | `4`     | `4`    | `12.1` | `4.3` | `4`     | [CSS Gradients](http://caniuse.com/#feat=css-gradients) |

| 引数     | 初期値 | 値                          | 備考                           |
| :------- | :----- | :-------------------------- | :----------------------------- |
| （省略） | なし   | `linear-gradient` の引数値  | **β版**                       |

* `background-image` の `linear-gradient` を返す。
* 未対応ブラウザのフォールバックとして `background-color` も返す。
* フォールバックの `background-color` は開始色が使用される。
* フォールバックの `background-color` を指定したい場合は、最終引数に `$fallback:` で指定する。
* **注意点（β版故の）**
    * ～ `iOS 4.2` &amp; ～ `Android 3.0` に対応させたい場合は `-webkit-gradient()` を別途併記する。
    * 指定可能な色数は最大 `10` 個（もしそれ以上必要なら改修するが、これ以上多くなることは無いと想定）。

```scss:@function
@mixin linear-gradient() {
  ...
}
```

```scss:scss（使用例）
.class-name {
  @include linear-gradient(to bottom, #ffffff, #faf8f5);
}
```

```css:css（コンパイル結果）
.class-name {
  background-color: #ffffff;
  background-image: -webkit-linear-gradient(top, #ffffff, #faf8f5);
  background-image: linear-gradient(to bottom, #ffffff, #faf8f5);
}
```

その他の使用例。

```scss:scss（使用例）
.class-name {
  // 色の位置を指定
  @include linear-gradient(to bottom, #ffffff 90%, #faf8f5 100%);

  // フォールバック色を指定
  @include linear-gradient(to bottom, #ffffff 90%, #faf8f5 100%, $fallback: #faf8f5);

  // 角度を指定
  @include linear-gradient(160deg, #999ca8 0, #999ca8 60%, #6b6f7d 62%, #6b6f7d 100%);
}
```

```css:css（コンパイル結果）
.class-name {
  background-color: #ffffff;
  background-image: -webkit-linear-gradient(top, #ffffff 90%, #faf8f5 100%);
  background-image: linear-gradient(to bottom, #ffffff 90%, #faf8f5 100%);

  background-color: #faf8f5;
  background-image: -webkit-linear-gradient(top, #ffffff 90%, #faf8f5 100%);
  background-image: linear-gradient(to bottom, #ffffff 90%, #faf8f5 100%);
  
  background-color: #999ca8;
  background-image: -webkit-linear-gradient(-430deg, #999ca8 0, #999ca8 60%, #6b6f7d 62%, #6b6f7d 100%);
  background-image: linear-gradient(160deg, #999ca8 0, #999ca8 60%, #6b6f7d 62%, #6b6f7d 100%);
}
```

*/
// ==================================================
/// @require {variable} $g-prefix-for-webkit
/// @require {variable} $g-prefix-for-mozilla
/// @require {variable} $g-prefix-for-microsoft
/// @require {variable} $g-prefix-for-opera
/// @require {variable} $g-prefix-for-spec

@mixin linear-gradient($pos, $g1, $g2: null,
                       $g3: null, $g4: null,
                       $g5: null, $g6: null,
                       $g7: null, $g8: null,
                       $g9: null, $g10: null,
                       $fallback: null) {
  // Detect what type of value exists in $pos
  $pos-type: type-of(nth($pos, 1));
  $pos-spec: null;
  $pos-degree: null;

  // If $pos is missing from mixin, reassign vars and add default position
  @if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
    $g10: $g9; $g9: $g8; $g8: $g7; $g7: $g6; $g6: $g5;
    $g5: $g4; $g4: $g3; $g3: $g2; $g2: $g1; $g1: $pos;
    $pos: null;
  }

  @if $pos {
    $positions: _linear-positions-parser($pos);
    $pos-degree: nth($positions, 1);
    $pos-spec:   nth($positions, 2);
  }

  $full: $g1, $g2, $g3, $g4, $g5, $g6, $g7, $g8, $g9, $g10;

  // Set $g1 as the default fallback color
  $fallback-color: nth($g1, 1);

  // If $fallback is a color use that color as the fallback color
  @if (type-of($fallback) == color) or ($fallback == "transparent") {
    $fallback-color: $fallback;
  }

  background-color: $fallback-color;
  @if $g-prefix-for-webkit {
    background-image: -webkit-linear-gradient($pos-degree $full);
  }
  @if $g-prefix-for-spec {
    background-image: unquote("linear-gradient(#{$pos-spec} #{$full})");
  }
}
